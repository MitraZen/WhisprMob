warning: in the working copy of 'src/screens/WhisprNotesScreen.tsx', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/src/screens/WhisprNotesScreen.tsx b/src/screens/WhisprNotesScreen.tsx[m
[1mindex 1309d6c..d472abe 100644[m
[1m--- a/src/screens/WhisprNotesScreen.tsx[m
[1m+++ b/src/screens/WhisprNotesScreen.tsx[m
[36m@@ -1,5 +1,8 @@[m
 import React, { useState, useEffect } from 'react';[m
[31m-import { View, Text, TextInput, TouchableOpacity, StyleSheet, ScrollView, Alert, ActivityIndicator, KeyboardAvoidingView, Platform } from 'react-native';[m
[32m+[m[32mimport {[m
[32m+[m[32m  View, Text, TextInput, TouchableOpacity, StyleSheet,[m
[32m+[m[32m  ScrollView, Alert, ActivityIndicator, KeyboardAvoidingView, Platform, Dimensions[m
[32m+[m[32m} from 'react-native';[m
 import { theme, spacing, borderRadius, moodConfig, getMoodConfig } from '@/utils/theme';[m
 import { MoodType } from '@/types';[m
 import { NavigationMenu } from '@/components/NavigationMenu';[m
[36m@@ -20,53 +23,33 @@[m [mexport const WhisprNotesScreen: React.FC<WhisprNotesScreenProps> = ({ onNavigate[m
   const [isSending, setIsSending] = useState(false);[m
   const [error, setError] = useState<string | null>(null);[m
   const [isNewUser, setIsNewUser] = useState(false);[m
[32m+[m[32m  const [expandedNotes, setExpandedNotes] = useState<Set<string>>(new Set());[m
   const { enableAdminMode } = useAdmin();[m
 [m
[31m-  // Load notes from database[m
[32m+[m[32m  // Load notes[m
   useEffect(() => {[m
[31m-    if (user?.id) {[m
[31m-      loadNotes();[m
[31m-    }[m
[32m+[m[32m    if (user?.id) loadNotes();[m
   }, [user?.id]);[m
 [m
[31m-  // Auto-refresh notes every 15 seconds[m
   useEffect(() => {[m
     if (!user?.id) return;[m
[31m-[m
[31m-    const interval = setInterval(() => {[m
[31m-      loadNotes();[m
[31m-    }, 15000); // Refresh every 15 seconds[m
[31m-[m
[32m+[m[32m    const interval = setInterval(loadNotes, 15000);[m
     return () => clearInterval(interval);[m
   }, [user?.id]);[m
 [m
   const loadNotes = async () => {[m
     if (!user?.id) return;[m
[31m-    [m
     setIsLoading(true);[m
     setError(null);[m
[31m-    [m
     try {[m
[31m-      console.log('Loading Whispr notes for user:', user.id);[m
[31m-      [m
[31m-      // Check if user is new (has no buddies) and load fewer notes[m
       const buddies = await BuddiesService.getBuddies(user.id);[m
       const userIsNew = !buddies || buddies.length === 0;[m
       setIsNewUser(userIsNew);[m
[31m-      [m
[31m-      let notesData;[m
[31m-      if (userIsNew) {[m
[31m-        console.log('New user detected, loading limited notes');[m
[31m-        notesData = await BuddiesService.getNewUserNotes(user.id, 5);[m
[31m-      } else {[m
[31m-        console.log('Existing user, loading full notes');[m
[31m-        notesData = await BuddiesService.getWhisprNotes(user.id);[m
[31m-      }[m
[31m-      [m
[31m-      console.log(`Loaded ${notesData.length} notes successfully (${userIsNew ? 'new user' : 'existing user'})`);[m
[32m+[m[32m      let notesData = userIsNew[m
[32m+[m[32m        ? await BuddiesService.getNewUserNotes(user.id, 5)[m
[32m+[m[32m        : await BuddiesService.getWhisprNotes(user.id);[m
       setNotes(notesData);[m
     } catch (err) {[m
[31m-      console.error('Error loading notes:', err);[m
       setError(err instanceof Error ? err.message : 'Failed to load notes');[m
     } finally {[m
       setIsLoading(false);[m
[36m@@ -74,233 +57,162 @@[m [mexport const WhisprNotesScreen: React.FC<WhisprNotesScreenProps> = ({ onNavigate[m
   };[m
 [m
   const handleSendNote = async () => {[m
[31m-    if (!message.trim()) {[m
[31m-      Alert.alert('Empty Message', 'Please enter a message to send.');[m
[31m-      return;[m
[31m-    }[m
[31m-[m
[31m-    if (!selectedMood) {[m
[31m-      Alert.alert('No Mood Selected', 'Please select a mood for your message.');[m
[31m-      return;[m
[31m-    }[m
[31m-[m
[31m-    if (!user?.id) {[m
[31m-      Alert.alert('Error', 'User not authenticated.');[m
[32m+[m[32m    if (!message.trim() || !selectedMood || !user?.id) {[m
[32m+[m[32m      Alert.alert('Error', 'Please enter a message and select a mood.');[m
       return;[m
     }[m
[31m-[m
     setIsSending(true);[m
[31m-    const messageContent = message.trim();[m
[32m+[m[32m    const content = message.trim();[m
     const mood = selectedMood;[m
[31m-    [m
[31m-    // Clear form immediately for better UX[m
     setMessage('');[m
     setSelectedMood(null);[m
[31m-[m
     try {[m
[31m-      console.log('Sending Whispr note:', { content: messageContent, mood, userId: user.id });[m
[31m-      const noteId = await BuddiesService.sendWhisprNote(user.id, messageContent, mood);[m
[31m-      console.log('Note sent successfully:', noteId);[m
[31m-      [m
[32m+[m[32m      await BuddiesService.sendWhisprNote(user.id, content, mood);[m
       Alert.alert('Success', 'Your Whispr note has been sent! 🌟');[m
[31m-      [m
[31m-      // Reload notes to show the new one[m
       await loadNotes();[m
[31m-      [m
[31m-    } catch (error) {[m
[31m-      console.error('Error sending note:', error);[m
[31m-      Alert.alert('Error', 'Failed to send note. Please try again.');[m
[31m-      // Restore form data if sending failed[m
[31m-      setMessage(messageContent);[m
[32m+[m[32m    } catch {[m
[32m+[m[32m      setMessage(content);[m
       setSelectedMood(mood);[m
[32m+[m[32m      Alert.alert('Error', 'Failed to send note. Try again.');[m
     } finally {[m
       setIsSending(false);[m
     }[m
   };[m
 [m
   const handleListen = async (noteId: string) => {[m
[31m-    if (!user?.id) {[m
[31m-      Alert.alert('Error', 'User not authenticated.');[m
[31m-      return;[m
[31m-    }[m
[31m-[m
     try {[m
       const result = await BuddiesService.listenToNote(noteId, user.id);[m
[31m-      [m
       if (result?.success) {[m
[31m-        Alert.alert([m
[31m-          'Note Listened! 👂', [m
[31m-          'You\'ve connected with this person! Check your Buddies tab to start chatting.',[m
[31m-          [[m
[31m-            { text: 'OK', onPress: () => onNavigate('buddies') }[m
[31m-          ][m
[31m-        );[m
[31m-        [m
[31m-        // Reload notes to update the status[m
[32m+[m[32m        Alert.alert('Note Listened! 👂', 'You connected! Check Buddies tab.', [[m
[32m+[m[32m          { text: 'OK', onPress: () => onNavigate('buddies') },[m
[32m+[m[32m        ]);[m
         await loadNotes();[m
[31m-      } else {[m
[31m-        Alert.alert('Error', 'Failed to listen to note. Please try again.');[m
       }[m
[31m-    } catch (error) {[m
[31m-      console.error('Error listening to note:', error);[m
[31m-      Alert.alert('Error', 'Failed to listen to note. Please try again.');[m
[32m+[m[32m    } catch {[m
[32m+[m[32m      Alert.alert('Error', 'Failed to listen to note.');[m
     }[m
   };[m
 [m
   const handleReject = async (noteId: string) => {[m
[31m-    if (!user?.id) {[m
[31m-      Alert.alert('Error', 'User not authenticated.');[m
[31m-      return;[m
[31m-    }[m
[31m-[m
     try {[m
[31m-      console.log('Rejecting note:', noteId, 'for user:', user.id);[m
       const result = await BuddiesService.rejectNote(noteId, user.id);[m
[31m-      console.log('Reject result:', result ? 'Success' : 'Failed');[m
[31m-      [m
       if (result?.success) {[m
         Alert.alert('Note Rejected', 'The note has been rejected.');[m
[31m-        [m
[31m-        // Reload notes to update the status[m
         await loadNotes();[m
[31m-      } else {[m
[31m-        Alert.alert('Error', 'Failed to reject note. Please try again.');[m
       }[m
[31m-    } catch (error) {[m
[31m-      console.error('Error rejecting note:', error);[m
[31m-      Alert.alert('Error', 'Failed to reject note. Please try again.');[m
[32m+[m[32m    } catch {[m
[32m+[m[32m      Alert.alert('Error', 'Failed to reject note.');[m
     }[m
   };[m
 [m
[31m-  const formatTimestamp = (timestamp: Date): string => {[m
[31m-    const now = new Date();[m
[31m-    const diff = now.getTime() - timestamp.getTime();[m
[31m-    const minutes = Math.floor(diff / 60000);[m
[31m-    const hours = Math.floor(diff / 3600000);[m
[31m-[m
[31m-    if (minutes < 1) return 'Just now';[m
[31m-    if (minutes < 60) return `${minutes}m ago`;[m
[31m-    if (hours < 24) return `${hours}h ago`;[m
[31m-    return timestamp.toLocaleDateString();[m
[32m+[m[32m  const formatTimestamp = (ts: Date) => {[m
[32m+[m[32m    const diff = Date.now() - ts.getTime();[m
[32m+[m[32m    const min = Math.floor(diff / 60000), hr = Math.floor(diff / 3600000);[m
[32m+[m[32m    if (min < 1) return 'Just now';[m
[32m+[m[32m    if (min < 60) return `${min}m ago`;[m
[32m+[m[32m    if (hr < 24) return `${hr}h ago`;[m
[32m+[m[32m    return ts.toLocaleDateString();[m
   };[m
 [m
[31m-  const handleLike = (noteId: string) => {[m
[31m-    setNotes(prev => prev.map(note => [m
[31m-      note.id === noteId [m
[31m-        ? { ...note, likes: note.likes + 1 }[m
[31m-        : note[m
[31m-    ));[m
[32m+[m[32m  const toggleExpand = (id: string) => {[m
[32m+[m[32m    setExpandedNotes(prev => {[m
[32m+[m[32m      const newSet = new Set(prev);[m
[32m+[m[32m      newSet.has(id) ? newSet.delete(id) : newSet.add(id);[m
[32m+[m[32m      return newSet;[m
[32m+[m[32m    });[m
   };[m
 [m
[31m-  const handleReply = (noteId: string) => {[m
[31m-    // Navigate to chat or show reply interface[m
[31m-    Alert.alert('Reply', 'Reply functionality coming soon!');[m
[31m-  };[m
[32m+[m[32m  const truncateText = (txt: string, max = 80) =>[m
[32m+[m[32m    txt.length > max ? txt.substring(0, max) + '...' : txt;[m
 [m
   return ([m
[31m-    <KeyboardAvoidingView [m
[31m-      style={styles.container} [m
[31m-      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}[m
[31m-    >[m
[32m+[m[32m    <KeyboardAvoidingView style={styles.container} behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>[m
[32m+[m[32m      {/* Header */}[m
       <View style={styles.header}>[m
[31m-        <View style={styles.headerContent}>[m
[31m-          <Text style={styles.title}>Whispr Notes</Text>[m
[31m-          <Text style={styles.subtitle}>Send anonymous messages to the world</Text>[m
[31m-        </View>[m
[31m-        [m
[32m+[m[32m        <Text style={styles.title}>Whispr Notes</Text>[m
[32m+[m[32m        <Text style={styles.subtitle}>Send anonymous messages to the world</Text>[m
         {isNewUser && ([m
           <View style={styles.newUserBanner}>[m
             <Text style={styles.newUserBannerText}>[m
[31m-              🎉 Welcome! You're seeing a limited set of notes. Listen to notes to discover more![m
[32m+[m[32m              🎉 Welcome! You're seeing a limited set of notes. Listen to discover more![m
             </Text>[m
           </View>[m
         )}[m
       </View>[m
 [m
[32m+[m[32m      {/* Notes List */}[m
       <ScrollView style={styles.notesContainer} showsVerticalScrollIndicator={false}>[m
         {isLoading ? ([m
           <View style={styles.loadingContainer}>[m
             <ActivityIndicator size="large" color={theme.colors.primary} />[m
[31m-            <Text style={styles.loadingText}>Loading notes...</Text>[m
[32m+[m[32m            <Text>Loading notes...</Text>[m
           </View>[m
         ) : error ? ([m
[31m-          <View style={styles.errorContainer}>[m
[32m+[m[32m          <View>[m
             <Text style={styles.errorText}>❌ {error}</Text>[m
[31m-            <TouchableOpacity style={styles.retryButton} onPress={loadNotes}>[m
[32m+[m[32m            <TouchableOpacity onPress={loadNotes} style={styles.retryButton}>[m
               <Text style={styles.retryButtonText}>Retry</Text>[m
             </TouchableOpacity>[m
           </View>[m
         ) : notes.length === 0 ? ([m
           <View style={styles.emptyContainer}>[m
[32m+[m[32m            <Text style={styles.emptyIcon}>💭</Text>[m
             <Text style={styles.emptyText}>No Whispr notes yet</Text>[m
             <Text style={styles.emptySubtext}>Be the first to share your thoughts!</Text>[m
           </View>[m
         ) : ([m
[31m-          <>[m
[31m-            {isNewUser && ([m
[31m-              <View style={styles.newUserBanner}>[m
[31m-                <Text style={styles.newUserBannerText}>[m
[31m-                  🎉 Welcome! You're seeing a curated selection of notes. [m
[31m-                  Listen to notes to make connections and see more![m
[31m-                </Text>[m
[31m-              </View>[m
[31m-            )}[m
[31m-                {notes.map((note) => ([m
[31m-                  <View key={note.id} style={styles.noteCard}>[m
[31m-                    <View style={styles.noteHeader}>[m
[31m-                      <View style={styles.moodIndicator}>[m
[31m-                        <Text style={styles.moodEmoji}>[m
[31m-                          {getMoodConfig(note.mood).emoji}[m
[31m-                        </Text>[m
[31m-                        <Text style={styles.moodText}>[m
[31m-                          {getMoodConfig(note.mood).description}[m
[31m-                        </Text>[m
[31m-                      </View>[m
[31m-                      <Text style={styles.timestamp}>{formatTimestamp(note.createdAt)}</Text>[m
[31m-                    </View>[m
[31m-                    [m
[31m-                    <Text style={styles.noteContent}>{note.content}</Text>[m
[31m-                    [m
[31m-                    <View style={styles.noteActions}>[m
[31m-                      <TouchableOpacity [m
[31m-                        style={styles.actionButton}[m
[31m-                        onPress={() => handleListen(note.id)}[m
[31m-                      >[m
[31m-                        <Text style={styles.actionButtonText}>👂 Listen</Text>[m
[31m-                      </TouchableOpacity>[m
[31m-                      <TouchableOpacity [m
[31m-                        style={styles.actionButton}[m
[31m-                        onPress={() => handleReject(note.id)}[m
[31m-                      >[m
[31m-                        <Text style={styles.actionButtonText}>❌ Reject</Text>[m
[31m-                      </TouchableOpacity>[m
[31m-                    </View>[m
[32m+[m[32m          notes.map(note => {[m
[32m+[m[32m            const expanded = expandedNotes.has(note.id);[m
[32m+[m[32m            return ([m
[32m+[m[32m              <TouchableOpacity[m
[32m+[m[32m                key={note.id}[m
[32m+[m[32m                style={[styles.noteCard]}[m
[32m+[m[32m                activeOpacity={0.9}[m
[32m+[m[32m                onPress={() => toggleExpand(note.id)}[m
[32m+[m[32m              >[m
[32m+[m[32m                <View style={styles.noteHeader}>[m
[32m+[m[32m                  <View style={styles.moodIndicator}>[m
[32m+[m[32m                    <Text style={styles.moodEmoji}>{getMoodConfig(note.mood).emoji}</Text>[m
[32m+[m[32m                    <Text style={styles.moodText}>{getMoodConfig(note.mood).description}</Text>[m
                   </View>[m
[31m-                ))}[m
[31m-          </>[m
[32m+[m[32m                  <Text style={styles.timestamp}>{formatTimestamp(note.createdAt)}</Text>[m
[32m+[m[32m                </View>[m
[32m+[m[32m                <Text style={styles.noteContent}>[m
[32m+[m[32m                  {expanded ? note.content : truncateText(note.content)}[m
[32m+[m[32m                </Text>[m
[32m+[m[32m                {!expanded && note.content.length > 80 && ([m
[32m+[m[32m                  <Text style={styles.expandHint}>Tap to expand...</Text>[m
[32m+[m[32m                )}[m
[32m+[m[32m                <View style={styles.noteActions}>[m
[32m+[m[32m                  <TouchableOpacity style={[styles.actionButton, styles.listenButton]} onPress={() => handleListen(note.id)}>[m
[32m+[m[32m                    <Text style={styles.actionButtonText}>👂 Listen</Text>[m
[32m+[m[32m                  </TouchableOpacity>[m
[32m+[m[32m                  <TouchableOpacity style={[styles.actionButton, styles.rejectButton]} onPress={() => handleReject(note.id)}>[m
[32m+[m[32m                    <Text style={styles.actionButtonText}>❌ Reject</Text>[m
[32m+[m[32m                  </TouchableOpacity>[m
[32m+[m[32m                </View>[m
[32m+[m[32m              </TouchableOpacity>[m
[32m+[m[32m            );[m
[32m+[m[32m          })[m
         )}[m
       </ScrollView>[m
 [m
[32m+[m[32m      {/* Compose Area */}[m
       <View style={styles.composeContainer}>[m
         <View style={styles.moodSelector}>[m
           <Text style={styles.moodLabel}>Select your mood:</Text>[m
           <ScrollView horizontal showsHorizontalScrollIndicator={false}>[m
[31m-            {Object.entries(moodConfig).map(([moodType, config]) => ([m
[32m+[m[32m            {Object.entries(moodConfig).map(([type, config]) => ([m
               <TouchableOpacity[m
[31m-                key={moodType}[m
[31m-                style={[[m
[31m-                  styles.moodButton,[m
[31m-                  selectedMood === moodType && styles.selectedMoodButton,[m
[31m-                ]}[m
[31m-                onPress={() => setSelectedMood(moodType as MoodType)}[m
[31m-                disabled={isSending}[m
[32m+[m[32m                key={type}[m
[32m+[m[32m                style={[styles.moodButton, selectedMood === type && styles.selectedMoodButton]}[m
[32m+[m[32m                onPress={() => setSelectedMood(type as MoodType)}[m
               >[m
                 <Text style={styles.moodButtonEmoji}>{config.emoji}</Text>[m
               </TouchableOpacity>[m
             ))}[m
           </ScrollView>[m
         </View>[m
[31m-[m
         <View style={styles.messageInputContainer}>[m
           <TextInput[m
             style={styles.messageInput}[m
[36m@@ -309,264 +221,100 @@[m [mexport const WhisprNotesScreen: React.FC<WhisprNotesScreenProps> = ({ onNavigate[m
             value={message}[m
             onChangeText={setMessage}[m
             multiline[m
[31m-            maxLength={500}[m
[31m-            editable={!isSending}[m
           />[m
           <TouchableOpacity[m
[31m-            style={[[m
[31m-              styles.sendButton,[m
[31m-              (!message.trim() || !selectedMood || isSending) && styles.sendButtonDisabled,[m
[31m-            ]}[m
[32m+[m[32m            style={[styles.sendButton, (!message.trim() || !selectedMood || isSending) && styles.sendButtonDisabled]}[m
             onPress={handleSendNote}[m
             disabled={!message.trim() || !selectedMood || isSending}[m
           >[m
[31m-            {isSending ? ([m
[31m-              <ActivityIndicator color="#fff" size="small" />[m
[31m-            ) : ([m
[31m-              <Text style={styles.sendButtonText}>Send</Text>[m
[31m-            )}[m
[32m+[m[32m            {isSending ? <ActivityIndicator color="#fff" /> : <Text style={styles.sendButtonText}>Send</Text>}[m
           </TouchableOpacity>[m
         </View>[m
       </View>[m
[31m-      [m
[31m-      {/* Bottom Navigation Menu */}[m
[32m+[m
       <NavigationMenu currentScreen="notes" onNavigate={onNavigate} />[m
[31m-      [m
[31m-      {/* Debug Overlay */}[m
       <DebugOverlay onToggleAdmin={enableAdminMode} />[m
     </KeyboardAvoidingView>[m
   );[m
 };[m
 [m
[32m+[m[32mconst { width } = Dimensions.get('window');[m
[32m+[m
 const styles = StyleSheet.create({[m
[31m-  container: {[m
[31m-    flex: 1,[m
[31m-    backgroundColor: theme.colors.background,[m
[31m-  },[m
[32m+[m[32m  container: { flex: 1, backgroundColor: theme.colors.background },[m
   header: {[m
[31m-    backgroundColor: theme.colors.primary,[m
[31m-    paddingTop: spacing.xl,[m
[31m-    paddingBottom: spacing.lg,[m
[31m-    paddingHorizontal: spacing.lg,[m
[31m-    ...theme.shadows.lg,[m
[31m-  },[m
[31m-  headerContent: {[m
[32m+[m[32m    backgroundColor: '#7c3aed',[m
[32m+[m[32m    padding: spacing.lg,[m
     alignItems: 'center',[m
[32m+[m[32m    ...theme.shadows.md,[m
   },[m
   title: {[m
     ...theme.typography.displaySmall,[m
     color: '#fff',[m
[31m-    textAlign: 'center',[m
[31m-    marginBottom: spacing.xs,[m
[32m+[m[32m    fontWeight: 'bold',[m
[32m+[m[32m    textShadowColor: 'rgba(0,0,0,0.3)',[m
[32m+[m[32m    textShadowOffset: { width: 0, height: 2 },[m
[32m+[m[32m    textShadowRadius: 4,[m
   },[m
   subtitle: {[m
     ...theme.typography.bodyLarge,[m
[31m-    color: 'rgba(255, 255, 255, 0.9)',[m
[31m-    textAlign: 'center',[m
[31m-    marginBottom: spacing.lg,[m
[32m+[m[32m    color: 'rgba(255,255,255,0.9)',[m
[32m+[m[32m    marginTop: spacing.xs,[m
   },[m
   newUserBanner: {[m
[31m-    backgroundColor: 'rgba(255, 255, 255, 0.15)',[m
[31m-    borderRadius: borderRadius.lg,[m
[31m-    padding: spacing.md,[m
     marginTop: spacing.sm,[m
[31m-    borderWidth: 1,[m
[31m-    borderColor: 'rgba(255, 255, 255, 0.2)',[m
[31m-  },[m
[31m-  newUserBannerText: {[m
[31m-    ...theme.typography.bodyMedium,[m
[31m-    color: '#fff',[m
[31m-    textAlign: 'center',[m
[31m-    fontWeight: '500',[m
[31m-  },[m
[31m-  notesContainer: {[m
[31m-    flex: 1,[m
[31m-    padding: spacing.md,[m
[32m+[m[32m    padding: spacing.sm,[m
[32m+[m[32m    borderRadius: borderRadius.md,[m
[32m+[m[32m    backgroundColor: 'rgba(255,255,255,0.15)',[m
   },[m
[32m+[m[32m  newUserBannerText: { color: '#fff', textAlign: 'center' },[m
[32m+[m[32m  notesContainer: { flex: 1, padding: spacing.md },[m
   noteCard: {[m
     backgroundColor: theme.colors.surface,[m
     borderRadius: borderRadius.xl,[m
[31m-    padding: spacing.lg,[m
[32m+[m[32m    padding: spacing.md,[m
     marginBottom: spacing.md,[m
[31m-    marginHorizontal: spacing.xs,[m
     ...theme.shadows.md,[m
[31m-    borderWidth: 1,[m
[31m-    borderColor: theme.colors.border,[m
[31m-    overflow: 'hidden',[m
[31m-  },[m
[31m-  noteHeader: {[m
[31m-    flexDirection: 'row',[m
[31m-    justifyContent: 'space-between',[m
[31m-    alignItems: 'center',[m
[31m-    marginBottom: spacing.sm,[m
[31m-  },[m
[31m-  moodIndicator: {[m
[31m-    flexDirection: 'row',[m
[31m-    alignItems: 'center',[m
[31m-  },[m
[31m-  moodEmoji: {[m
[31m-    fontSize: 16,[m
[31m-    marginRight: spacing.xs,[m
[31m-  },[m
[31m-  moodText: {[m
[31m-    fontSize: 12,[m
[31m-    color: theme.colors.onSurface,[m
[31m-    fontWeight: '500',[m
[31m-  },[m
[31m-  timestamp: {[m
[31m-    fontSize: 12,[m
[31m-    color: '#9ca3af',[m
[31m-  },[m
[31m-  noteContent: {[m
[31m-    fontSize: 16,[m
[31m-    color: theme.colors.onSurface,[m
[31m-    lineHeight: 22,[m
[31m-    marginBottom: spacing.md,[m
[31m-  },[m
[31m-  noteActions: {[m
[31m-    flexDirection: 'row',[m
[31m-    gap: spacing.lg,[m
[31m-  },[m
[31m-  actionButton: {[m
[31m-    flexDirection: 'row',[m
[31m-    alignItems: 'center',[m
[31m-  },[m
[31m-  actionButtonText: {[m
[31m-    fontSize: 14,[m
[31m-    color: theme.colors.onSurface,[m
   },[m
[32m+[m[32m  noteHeader: { flexDirection: 'row', justifyContent: 'space-between', marginBottom: spacing.sm },[m
[32m+[m[32m  moodIndicator: { flexDirection: 'row', alignItems: 'center' },[m
[32m+[m[32m  moodEmoji: { fontSize: 16, marginRight: spacing.xs },[m
[32m+[m[32m  moodText: { fontSize: 12, fontWeight: '600', color: theme.colors.onSurface },[m
[32m+[m[32m  timestamp: { fontSize: 10, color: '#9ca3af' },[m
[32m+[m[32m  noteContent: { fontSize: 14, color: theme.colors.onSurface, marginBottom: spacing.sm },[m
[32m+[m[32m  expandHint: { fontSize: 10, fontStyle: 'italic', color: '#9ca3af' },[m
[32m+[m[32m  noteActions: { flexDirection: 'row', justifyContent: 'space-around' },[m
[32m+[m[32m  actionButton: { flex: 1, alignItems: 'ce